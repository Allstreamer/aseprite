name: build
on: [push]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [RelWithDebInfo]
        enable_ui: [on]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Workaround for windows-2022 and cmake 3.25.0
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf C:/Strawberry/
    - name: Download Depedancy
      shell: bash
      run: mkdir skia && cd skia && curl https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip -o Skia.zip && 7z x Skia.zip && cd ..
    - name: Generating Makefiles
      shell: bash
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=..\skia \
          -DSKIA_LIBRARY_DIR=..\skia\out\Release-x64 \
          -DSKIA_LIBRARY=..\skia\out\Release-x64\skia.lib \
          -DENABLE_CCACHE=off \
          -G Ninja ..
        cd ..
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja aseprite
    - uses: actions/upload-artifact@v3
      with:
        name: build
        path: build/bin/
    - name: Testing
      shell: bash
      run: pwd | ls -la
    #- name: Running CLI Tests
    #  shell: bash
    #  run: |
    #    if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #      export XVFB=xvfb-run
    #    fi
    #    export ASEPRITE=$PWD/build/bin/aseprite
    #    cd tests
    #    $XVFB bash run-tests.sh
